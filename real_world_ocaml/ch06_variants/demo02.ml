open Core

(* Combining Records and Variants *)

module Time_ns = Core.Time_ns

(* When you want to define multiple records in current module. 
It is a common practise to put each record in a different module (as sub-module).*)
module Log_entry = struct
  type t = { session_id : string; time : Time_ns.t; important : bool; message : string }
end

module Heartbeat = struct
  type t = { session_id : string; time : Time_ns.t; status_message : string }
end

module Logon = struct
  type t = { session_id : string; time : Time_ns.t; user : string; credentials : string }
end

type client_message = Logon of Logon.t | Heartbeat of Heartbeat.t | Log_entry of Log_entry.t

(** It takes a list of client_messages and returns all messages generated by a given user. *)
let messages_for_user user messages =
  let user_messages, _ =
    List.fold messages
      ~init:
        ( (* The set of session identifiers for the user that have been seen thus far *)
          [],
          (* The set of messages so far that are associated with the user *)
          Set.empty (module String) )
      ~f:(fun ((messages, user_sessions) as acc) message ->
        match message with
        | Logon m ->
            if String.(m.user = user) then (message :: messages, Set.add user_sessions m.session_id)
            else acc
        | Heartbeat _ | Log_entry _ ->
            let session_id =
              match message with
              | Logon m -> m.session_id
              | Heartbeat m -> m.session_id
              | Log_entry m -> m.session_id
            in
            if Set.mem user_sessions session_id then (message :: messages, user_sessions) else acc)
  in
  List.rev user_messages
